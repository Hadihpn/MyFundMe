{
  "address": "0xD8ebdeA5849f84913964E2122758d4f9B0004C3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f48de977934484871704a4f1d7cb77cf1bf5fef09ea9487f4e677283738f141",
  "receipt": {
    "to": null,
    "from": "0xec0698f69876d90d7ebFBf07963EE331227c5846",
    "contractAddress": "0xD8ebdeA5849f84913964E2122758d4f9B0004C3C",
    "transactionIndex": 32,
    "gasUsed": "1147739",
    "logsBloom": "0x
    "blockHash": "0xb24246c8a8b5fce7169e2ecd5b1ee12a1b7b84ef66a52002702f3ba6ea3e2117",
    "transactionHash": "0x5f48de977934484871704a4f1d7cb77cf1bf5fef09ea9487f4e677283738f141",
    "logs": [],
    "blockNumber": 4470470,
    "cumulativeGasUsed": "4232366",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "8a712f2580a1c84c68ae2ab32268c223",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// 1. Pragma\\r\\npragma solidity ^0.8.7;\\r\\n// 2. Imports\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// 3. Interfaces, Libraries, Contracts\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**@title A sample Funding Contract\\r\\n * @author Patrick Collins\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\r\\n    address private immutable i_owner;\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n    uint256 public maximumFund;\\r\\n    address public maximumFunder;\\r\\n    // Events (we have none!)\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions Order:\\r\\n    //// constructor\\r\\n    //// receive\\r\\n    //// fallback\\r\\n    //// external\\r\\n    //// public\\r\\n    //// internal\\r\\n    //// private\\r\\n    //// view / pure\\r\\n\\r\\n    constructor(address priceFeed) {\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Funds our contract based on the ETH/USD price\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n        \\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        s_funders.push(msg.sender);\\r\\n        if(msg.value>maximumFund){\\r\\n            maximumFund = msg.value;\\r\\n            maximumFunder = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // Transfer vs call vs Send\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: ((address(this).balance*97)/100)}(\\\"\\\");\\r\\n        require(success);\\r\\n        (success, ) = payable(maximumFunder).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        // mappings can't be in memory, sorry!\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /** @notice Gets the amount that an address has funded\\r\\n     *  @param fundingAddress the address of the funder\\r\\n     *  @return the amount funded\\r\\n     */\\r\\n    function getAddressToAmountFunded(address fundingAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (uint256) {\\r\\n        return s_priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8491a9c8ae46027f68a5cb6561ff0d71d67909a177672c37ea83cfed474df0a8\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  // call it get fiatConversionRate, since it assumes something about decimals\\r\\n  // It wouldn't work for every aggregator\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xab7d80676dc221d14cd91c54314e8708d2b197b64b990984b6c3370d486ed5f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014ef380380620014ef8339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6113626200018d60003960008181610347015281816104da0152818161065c0152818161083a0152610a3001526113626000f3fe60806040526004361061009c5760003560e01c80636b69a592116100645780636b69a59214610176578063893d20e8146101a15780639e87a5cd146101cc578063b60d4288146101f7578063be2693f014610201578063d7b4750c146102185761009c565b80630343fb25146100a15780630d8e6e2c146100de5780633ccfd60b146101095780634dd7f383146101205780635dc658801461014b575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610cf9565b610255565b6040516100d59190610ed9565b60405180910390f35b3480156100ea57600080fd5b506100f361029e565b6040516101009190610ed9565b60405180910390f35b34801561011557600080fd5b5061011e610345565b005b34801561012c57600080fd5b5061013561061f565b6040516101429190610e83565b60405180910390f35b34801561015757600080fd5b50610160610645565b60405161016d9190610ed9565b60405180910390f35b34801561018257600080fd5b5061018b61064b565b6040516101989190610ed9565b60405180910390f35b3480156101ad57600080fd5b506101b6610658565b6040516101c39190610e83565b60405180910390f35b3480156101d857600080fd5b506101e1610680565b6040516101ee9190610e9e565b60405180910390f35b6101ff6106aa565b005b34801561020d57600080fd5b50610216610838565b005b34801561022457600080fd5b5061023f600480360381019061023a9190610d26565b610ac6565b60405161024c9190610e83565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190610d53565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ca576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104755760008082815481106103ef576103ee611241565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046d9061119a565b9150506103cd565b50600067ffffffffffffffff81111561049157610490611270565b5b6040519080825280602002602001820160405280156104bf5781602001602082028036833780820191505090505b50600090805190602001906104d5929190610be9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16606460614761051e91906110ae565b6105289190610f66565b60405161053490610e6e565b60006040518083038185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b505090508061058457600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516105ca90610e6e565b60006040518083038185875af1925050503d8060008114610607576040519150601f19603f3d011682016040523d82523d6000602084013e61060c565b606091505b5050809150508061061c57600080fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006106e9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610b0d90919063ffffffff16565b101561072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072190610eb9565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107799190610f10565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600354341115610836573460038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108bd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561094057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108f6575b5050505050905060005b81518110156109cb57600082828151811061096857610967611241565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806109c39061119a565b91505061094a565b50600067ffffffffffffffff8111156109e7576109e6611270565b5b604051908082528060200260200182016040528015610a155781602001602082028036833780820191505090505b5060009080519060200190610a2b929190610be9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610a7290610e6e565b60006040518083038185875af1925050503d8060008114610aaf576040519150601f19603f3d011682016040523d82523d6000602084013e610ab4565b606091505b5050905080610ac257600080fd5b5050565b6000808281548110610adb57610ada611241565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610b1983610b49565b90506000670de0b6b3a76400008583610b3291906110ae565b610b3c9190610f66565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca9190610d80565b5050509150506402540be40081610be19190610f97565b915050919050565b828054828255906000526020600020908101928215610c62579160200282015b82811115610c615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c09565b5b509050610c6f9190610c73565b5090565b5b80821115610c8c576000816000905550600101610c74565b5090565b600081359050610c9f816112d0565b92915050565b600081519050610cb4816112e7565b92915050565b600081359050610cc9816112fe565b92915050565b600081519050610cde816112fe565b92915050565b600081519050610cf381611315565b92915050565b600060208284031215610d0f57610d0e61129f565b5b6000610d1d84828501610c90565b91505092915050565b600060208284031215610d3c57610d3b61129f565b5b6000610d4a84828501610cba565b91505092915050565b600060208284031215610d6957610d6861129f565b5b6000610d7784828501610ccf565b91505092915050565b600080600080600060a08688031215610d9c57610d9b61129f565b5b6000610daa88828901610ce4565b9550506020610dbb88828901610ca5565b9450506040610dcc88828901610ccf565b9350506060610ddd88828901610ccf565b9250506080610dee88828901610ce4565b9150509295509295909350565b610e0481611108565b82525050565b610e1381611164565b82525050565b6000610e26601b83610eff565b9150610e31826112a4565b602082019050919050565b6000610e49600083610ef4565b9150610e54826112cd565b600082019050919050565b610e6881611144565b82525050565b6000610e7982610e3c565b9150819050919050565b6000602082019050610e986000830184610dfb565b92915050565b6000602082019050610eb36000830184610e0a565b92915050565b60006020820190508181036000830152610ed281610e19565b9050919050565b6000602082019050610eee6000830184610e5f565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610f1b82611144565b9150610f2683611144565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f5b57610f5a6111e3565b5b828201905092915050565b6000610f7182611144565b9150610f7c83611144565b925082610f8c57610f8b611212565b5b828204905092915050565b6000610fa28261111a565b9150610fad8361111a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fec57610feb6111e3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611029576110286111e3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611066576110656111e3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110a3576110a26111e3565b5b828202905092915050565b60006110b982611144565b91506110c483611144565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110fd576110fc6111e3565b5b828202905092915050565b600061111382611124565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061116f82611176565b9050919050565b600061118182611188565b9050919050565b600061119382611124565b9050919050565b60006111a582611144565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111d8576111d76111e3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6112d981611108565b81146112e457600080fd5b50565b6112f08161111a565b81146112fb57600080fd5b50565b61130781611144565b811461131257600080fd5b50565b61131e8161114e565b811461132957600080fd5b5056fea2646970667358221220fb026f4c79423ead3660283b9dc584dbd7fdab8aa2dc7257cdb009ac9ce9bcc164736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636b69a592116100645780636b69a59214610176578063893d20e8146101a15780639e87a5cd146101cc578063b60d4288146101f7578063be2693f014610201578063d7b4750c146102185761009c565b80630343fb25146100a15780630d8e6e2c146100de5780633ccfd60b146101095780634dd7f383146101205780635dc658801461014b575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610cf9565b610255565b6040516100d59190610ed9565b60405180910390f35b3480156100ea57600080fd5b506100f361029e565b6040516101009190610ed9565b60405180910390f35b34801561011557600080fd5b5061011e610345565b005b34801561012c57600080fd5b5061013561061f565b6040516101429190610e83565b60405180910390f35b34801561015757600080fd5b50610160610645565b60405161016d9190610ed9565b60405180910390f35b34801561018257600080fd5b5061018b61064b565b6040516101989190610ed9565b60405180910390f35b3480156101ad57600080fd5b506101b6610658565b6040516101c39190610e83565b60405180910390f35b3480156101d857600080fd5b506101e1610680565b6040516101ee9190610e9e565b60405180910390f35b6101ff6106aa565b005b34801561020d57600080fd5b50610216610838565b005b34801561022457600080fd5b5061023f600480360381019061023a9190610d26565b610ac6565b60405161024c9190610e83565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190610d53565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ca576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104755760008082815481106103ef576103ee611241565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046d9061119a565b9150506103cd565b50600067ffffffffffffffff81111561049157610490611270565b5b6040519080825280602002602001820160405280156104bf5781602001602082028036833780820191505090505b50600090805190602001906104d5929190610be9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16606460614761051e91906110ae565b6105289190610f66565b60405161053490610e6e565b60006040518083038185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b505090508061058457600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516105ca90610e6e565b60006040518083038185875af1925050503d8060008114610607576040519150601f19603f3d011682016040523d82523d6000602084013e61060c565b606091505b5050809150508061061c57600080fd5b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006106e9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610b0d90919063ffffffff16565b101561072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072190610eb9565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107799190610f10565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600354341115610836573460038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108bd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561094057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108f6575b5050505050905060005b81518110156109cb57600082828151811061096857610967611241565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806109c39061119a565b91505061094a565b50600067ffffffffffffffff8111156109e7576109e6611270565b5b604051908082528060200260200182016040528015610a155781602001602082028036833780820191505090505b5060009080519060200190610a2b929190610be9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610a7290610e6e565b60006040518083038185875af1925050503d8060008114610aaf576040519150601f19603f3d011682016040523d82523d6000602084013e610ab4565b606091505b5050905080610ac257600080fd5b5050565b6000808281548110610adb57610ada611241565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610b1983610b49565b90506000670de0b6b3a76400008583610b3291906110ae565b610b3c9190610f66565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca9190610d80565b5050509150506402540be40081610be19190610f97565b915050919050565b828054828255906000526020600020908101928215610c62579160200282015b82811115610c615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c09565b5b509050610c6f9190610c73565b5090565b5b80821115610c8c576000816000905550600101610c74565b5090565b600081359050610c9f816112d0565b92915050565b600081519050610cb4816112e7565b92915050565b600081359050610cc9816112fe565b92915050565b600081519050610cde816112fe565b92915050565b600081519050610cf381611315565b92915050565b600060208284031215610d0f57610d0e61129f565b5b6000610d1d84828501610c90565b91505092915050565b600060208284031215610d3c57610d3b61129f565b5b6000610d4a84828501610cba565b91505092915050565b600060208284031215610d6957610d6861129f565b5b6000610d7784828501610ccf565b91505092915050565b600080600080600060a08688031215610d9c57610d9b61129f565b5b6000610daa88828901610ce4565b9550506020610dbb88828901610ca5565b9450506040610dcc88828901610ccf565b9350506060610ddd88828901610ccf565b9250506080610dee88828901610ce4565b9150509295509295909350565b610e0481611108565b82525050565b610e1381611164565b82525050565b6000610e26601b83610eff565b9150610e31826112a4565b602082019050919050565b6000610e49600083610ef4565b9150610e54826112cd565b600082019050919050565b610e6881611144565b82525050565b6000610e7982610e3c565b9150819050919050565b6000602082019050610e986000830184610dfb565b92915050565b6000602082019050610eb36000830184610e0a565b92915050565b60006020820190508181036000830152610ed281610e19565b9050919050565b6000602082019050610eee6000830184610e5f565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610f1b82611144565b9150610f2683611144565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f5b57610f5a6111e3565b5b828201905092915050565b6000610f7182611144565b9150610f7c83611144565b925082610f8c57610f8b611212565b5b828204905092915050565b6000610fa28261111a565b9150610fad8361111a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fec57610feb6111e3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611029576110286111e3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611066576110656111e3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110a3576110a26111e3565b5b828202905092915050565b60006110b982611144565b91506110c483611144565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110fd576110fc6111e3565b5b828202905092915050565b600061111382611124565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061116f82611176565b9050919050565b600061118182611188565b9050919050565b600061119382611124565b9050919050565b60006111a582611144565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111d8576111d76111e3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6112d981611108565b81146112e457600080fd5b50565b6112f08161111a565b81146112fb57600080fd5b50565b61130781611144565b811461131257600080fd5b50565b61131e8161114e565b811461132957600080fd5b5056fea2646970667358221220fb026f4c79423ead3660283b9dc584dbd7fdab8aa2dc7257cdb009ac9ce9bcc164736f6c63430008070033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 76,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "maximumFund",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 78,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "maximumFunder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}